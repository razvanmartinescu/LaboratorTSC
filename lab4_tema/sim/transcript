# Reading C:/modeltech_6.6d/tcl/vsim/pref.tcl 
# //  ModelSim SE 6.6d Nov  1 2010 
# //
# //  Copyright 1991-2010 Mentor Graphics Corporation
# //              All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND 
# //  PROPRIETARY INFORMATION WHICH IS THE PROPERTY
# //  OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS
# //  AND IS SUBJECT TO LICENSE TERMS.
# //
# do run.do 
# 1
# Model Technology ModelSim SE vlog 6.6d Compiler 2010.11 Nov  1 2010
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling interface tb_ifc
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# vsim +notimingchecks +nowarnTSCALE -sva -nocoverage -quiet -novopt top 
# Refreshing C:\Users\User\Desktop\Lab TSC\lab4_tema\sim\work.instr_register_pkg
# Refreshing C:\Users\User\Desktop\Lab TSC\lab4_tema\sim\work.top
# Refreshing C:\Users\User\Desktop\Lab TSC\lab4_tema\sim\work.tb_ifc
# Refreshing C:\Users\User\Desktop\Lab TSC\lab4_tema\sim\work.instr_register_test
# Refreshing C:\Users\User\Desktop\Lab TSC\lab4_tema\sim\work.instr_register
# ** Warning: (vsim-3008) ../lab01_testbench-interface/instr_register_test.sv(32): [CNNODP] - Component name (clk) is not on a downward path.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(75): Clocking block output intf_lab.cb.opcode is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(73): Clocking block output intf_lab.cb.operand_a is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(74): Clocking block output intf_lab.cb.operand_b is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(29): Clocking block output intf_lab.cb.read_pointer is not legal in this
# or another expression.
#         Region: /top/test
# ** Warning: (vsim-8441) ../lab01_testbench-interface/instr_register_test.sv(28): Clocking block output intf_lab.cb.write_pointer is not legal in this
# or another expression.
#         Region: /top/test
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# FIRST HEADER
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 4
# PRINT TRANSACTION TIME:                   44
# 
# Writing to register location 1: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 9
# PRINT TRANSACTION TIME:                   54
# 
# Writing to register location 2: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 13
# PRINT TRANSACTION TIME:                   64
# 
# Writing to register location 3: 
#   opcode = 2 (PASSB)
#   operand_a = -8
#   operand_b = 5
# PRINT TRANSACTION TIME:                   74
# 
# Writing to register location 4: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 1
# PRINT TRANSACTION TIME:                   84
# 
# Writing to register location 5: 
#   opcode = 5 (MULT)
#   operand_a = 5
#   operand_b = 6
# PRINT TRANSACTION TIME:                   94
# 
# Writing to register location 6: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 13
# PRINT TRANSACTION TIME:                  104
# 
# Writing to register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 9
# PRINT TRANSACTION TIME:                  114
# 
# Writing to register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 3
#   operand_b = 5
# PRINT TRANSACTION TIME:                  124
# 
# Writing to register location 9: 
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 5
# PRINT TRANSACTION TIME:                  134
# 
# Writing to register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 2
# PRINT TRANSACTION TIME:                  144
# 
# Writing to register location 11: 
#   opcode = 6 (DIV)
#   operand_a = 9
#   operand_b = 2
# PRINT TRANSACTION TIME:                  154
# 
# Writing to register location 12: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 8
# PRINT TRANSACTION TIME:                  164
# 
# Writing to register location 13: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 12
# PRINT TRANSACTION TIME:                  174
# 
# Writing to register location 14: 
#   opcode = 5 (MULT)
#   operand_a = -11
#   operand_b = 13
# PRINT TRANSACTION TIME:                  184
# 
# Writing to register location 15: 
#   opcode = 2 (PASSB)
#   operand_a = 15
#   operand_b = 3
# PRINT TRANSACTION TIME:                  194
# 
# Writing to register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# PRINT TRANSACTION TIME:                  204
# 
# Writing to register location 17: 
#   opcode = 5 (MULT)
#   operand_a = -2
#   operand_b = 10
# PRINT TRANSACTION TIME:                  214
# 
# Writing to register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -12
#   operand_b = 6
# PRINT TRANSACTION TIME:                  224
# 
# Writing to register location 19: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 13
# PRINT TRANSACTION TIME:                  234
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 4
# PRINT TRANSACTION TIME:                  254
# 
# Read from register location 1: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 9
# PRINT TRANSACTION TIME:                  264
# 
# Read from register location 2: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 13
# PRINT TRANSACTION TIME:                  274
# 
# Read from register location 3: 
#   opcode = 2 (PASSB)
#   operand_a = -8
#   operand_b = 5
# PRINT TRANSACTION TIME:                  284
# 
# Read from register location 4: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 1
# PRINT TRANSACTION TIME:                  294
# 
# Read from register location 5: 
#   opcode = 5 (MULT)
#   operand_a = 5
#   operand_b = 6
# PRINT TRANSACTION TIME:                  304
# 
# Read from register location 6: 
#   opcode = 4 (SUB)
#   operand_a = 3
#   operand_b = 13
# PRINT TRANSACTION TIME:                  314
# 
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 9
# PRINT TRANSACTION TIME:                  324
# 
# Read from register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 3
#   operand_b = 5
# PRINT TRANSACTION TIME:                  334
# 
# Read from register location 9: 
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 5
# PRINT TRANSACTION TIME:                  344
# 
# Read from register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 2
# PRINT TRANSACTION TIME:                  354
# 
# Read from register location 11: 
#   opcode = 6 (DIV)
#   operand_a = 9
#   operand_b = 2
# PRINT TRANSACTION TIME:                  364
# 
# Read from register location 12: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 8
# PRINT TRANSACTION TIME:                  374
# 
# Read from register location 13: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 12
# PRINT TRANSACTION TIME:                  384
# 
# Read from register location 14: 
#   opcode = 5 (MULT)
#   operand_a = -11
#   operand_b = 13
# PRINT TRANSACTION TIME:                  394
# 
# Read from register location 15: 
#   opcode = 2 (PASSB)
#   operand_a = 15
#   operand_b = 3
# PRINT TRANSACTION TIME:                  404
# 
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# PRINT TRANSACTION TIME:                  414
# 
# Read from register location 17: 
#   opcode = 5 (MULT)
#   operand_a = -2
#   operand_b = 10
# PRINT TRANSACTION TIME:                  424
# 
# Read from register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -12
#   operand_b = 6
# PRINT TRANSACTION TIME:                  434
# 
# Read from register location 19: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 13
# PRINT TRANSACTION TIME:                  444
# 
# 
# ***********************************************************
# ***  THIS IS NOT A SELF-CHECKING TESTBENCH (YET).  YOU  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(61)
#    Time: 446 ns  Iteration: 1  Instance: /top/test
# 1
# Break in Module instr_register_test at ../lab01_testbench-interface/instr_register_test.sv line 61
# Simulation Breakpoint: 1
# Break in Module instr_register_test at ../lab01_testbench-interface/instr_register_test.sv line 61
# MACRO ./run.do PAUSED at line 45
